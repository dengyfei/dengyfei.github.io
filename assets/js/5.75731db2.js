(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{440:function(s,a,t){s.exports=t.p+"assets/img/what.c17fb841.jpg"},441:function(s,a,t){s.exports=t.p+"assets/img/centralized.c433d8eb.png"},442:function(s,a,t){s.exports=t.p+"assets/img/distributed.92672c9d.png"},443:function(s,a,t){s.exports=t.p+"assets/img/happy.2a591093.jpg"},444:function(s,a,t){s.exports=t.p+"assets/img/process.b0dd9295.png"},445:function(s,a,t){s.exports=t.p+"assets/img/push.3c68d388.png"},446:function(s,a,t){s.exports=t.p+"assets/img/push_error.96a7e602.png"},447:function(s,a,t){s.exports=t.p+"assets/img/cached.f1f5a6b0.png"},448:function(s,a,t){s.exports=t.p+"assets/img/start.4e70a555.png"},449:function(s,a,t){s.exports=t.p+"assets/img/reset.cc6fb41d.png"},450:function(s,a,t){s.exports=t.p+"assets/img/end.fa98f7da.png"},451:function(s,a,t){s.exports=t.p+"assets/img/stash.7b0e0b69.png"},452:function(s,a,t){s.exports=t.p+"assets/img/pop.01f23ffd.png"},453:function(s,a,t){s.exports=t.p+"assets/img/apply.47b3bccc.png"},454:function(s,a,t){s.exports=t.p+"assets/img/drop.3ac82d41.png"},455:function(s,a,t){s.exports=t.p+"assets/img/delete.b35d4c3e.gif"},456:function(s,a,t){s.exports=t.p+"assets/img/delete_origin.654573b7.png"},457:function(s,a,t){s.exports=t.p+"assets/img/merge1.680cc79e.png"},458:function(s,a,t){s.exports=t.p+"assets/img/merge2.58285798.png"},459:function(s,a,t){s.exports=t.p+"assets/img/merge3.68a4c969.png"},460:function(s,a,t){s.exports=t.p+"assets/img/merge4.cb4b4e5f.png"},461:function(s,a,t){s.exports=t.p+"assets/img/rebase.4c1096a5.png"},513:function(s,a,t){"use strict";t.r(a);var e=t(2),r=Object(e.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("p",[s._v("我们经常听到一句话：git 是一个分布式版本控制系统，而 svn 是一个集中式版本控制系统。")]),s._v(" "),a("p",[s._v("但是，什么是分布式版本控制系统，什么是集中式版本控制系统，两者有什么区别，怕是许多同学听起来一脸懵 *。")]),s._v(" "),a("div",{staticStyle:{margin:"auto",width:"200px",hight:"200px"}},[a("img",{attrs:{src:t(440)}})]),s._v(" "),a("p",[s._v("集中式版本控制系统最大的特点就是"),a("strong",[s._v("版本库集中存放于中央服务器中")]),s._v("，每个开发人员都需要从中心服务器拉取代码到本地，而且每次拉取的只是对应的某个特定版本(默认为最新版本)，开发完之后在把自己的代码推送到中央服务器中，如下图所示：")]),s._v(" "),a("p",[a("img",{attrs:{src:t(441),alt:"centralized.png"}})]),s._v(" "),a("p",[s._v("由于每次都是拉取一个指定的版本，所以"),a("strong",[s._v("本地始终只会存在一个版本，没有版本库的修改记录，因此集中式版本控制系统最大的毛病就是必须联网才能工作。")]),s._v(" 如果在局域网内还好，带宽够大，速度够快，可是一旦在中央服务器宕机，本地将无法推送。")]),s._v(" "),a("p",[s._v("而分布式版本控制系统则完全不同。首先，它完全没有中央服务器，又或者说，每个开发者的电脑都是一台中央服务器。因为它拉取的是整个版本库，因此每个人的电脑上都是一个完整的版本库，这样，你工作的时候，就不需要联网了，下图所示：")]),s._v(" "),a("p",[a("img",{attrs:{src:t(442),alt:"distributed.png"}})]),s._v(" "),a("p",[s._v("既然每个人的电脑都有一个完整的版本库，那么如何多人协作呢？")]),s._v(" "),a("p",[s._v("其实很简单，比如你在电脑上改了文件 A，你同事也在他的电脑上改了文件 A，这时，你们俩只需将各自的修改推送给对方，就可以互相看到对方的修改了。")]),s._v(" "),a("p",[s._v("那问题又来了，我们公司 50 个人参与项目开发，总不能每次开发前都把每个人的修改同步一遍吧。那就真成了正当摸鱼了。")]),s._v(" "),a("div",{staticStyle:{width:"250px",height:"250px",margin:"auto"}},[a("img",{attrs:{src:t(443)}})]),s._v(" "),a("p",[s._v("所以，既然是多人协作，那么我们就指定一个人的电脑作为总仓库，所有人都将自己的修改推送给他，同时也从他的电脑上拉取其他人的修改，这样就能保证他的仓库保留了所有人的改动，这个人的电脑其实就相当于集中式版本控制库中的中央服务器角色。")]),s._v(" "),a("p",[s._v("因此，我们通常说的分布式版本控制系统的服务器其实就是找一台电脑充当服务器的角色，每天 24 小时开机，分布式版本控制系统中没有中央服务器也是可以正常工作的，只是同步其他人的代码很不方便，而中央服务器存在的意义就仅仅式为了方便同步其他人的代码。")]),s._v(" "),a("p",[s._v("另外分布式也比集中式更加安全，每次提取项目，就是把整个项目完全的镜像下来，这样一来，任何一个人的电脑发生故障，事后都可以用其他人的镜像仓库恢复。")]),s._v(" "),a("h2",{attrs:{id:"git-流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-流程"}},[s._v("#")]),s._v(" Git 流程")]),s._v(" "),a("p",[s._v("在 git 当中，有四个区域是需要区分的：")]),s._v(" "),a("ul",[a("li",[s._v("工作区(Workspace)：代码存放在磁盘的目录位置，也是我们写代码的位置")]),s._v(" "),a("li",[s._v("暂存区(Index/Stage)：临时存储的位置，还未生成历史版本，即没有 sha1 值，可以直接删掉。")]),s._v(" "),a("li",[s._v("本地库(Repository)：提交到本地仓库的代码会生成历史版本，是删不掉的。")]),s._v(" "),a("li",[s._v("远程库(Remote)：代码托管中心。GitLab、Github、Gitee")])]),s._v(" "),a("p",[s._v("下图展示了四个工作区的操作：\n"),a("img",{attrs:{src:t(444),alt:"process.png"}})]),s._v(" "),a("h2",{attrs:{id:"获取-git-仓库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#获取-git-仓库"}},[s._v("#")]),s._v(" 获取 git 仓库")]),s._v(" "),a("p",[s._v("获取 git 仓库分为两种情况：本地新建仓库和克隆现有项目。")]),s._v(" "),a("h3",{attrs:{id:"新建本地仓库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#新建本地仓库"}},[s._v("#")]),s._v(" 新建本地仓库")]),s._v(" "),a("p",[s._v("当我们开始一个项目时，项目的代码还未托管到远程库中，这个时候我们就需要在本地初始化一个本地仓库，然后再把本地仓库托管到远程库中。初始化本地仓库可以在"),a("code",[s._v("Git Bash")]),s._v("中输入以下命令实现：")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[s._v("git init\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("此时，git 会在当前目录下新建一个"),a("code",[s._v(".git")]),s._v("的文件，表明本地仓库已建成。")]),s._v(" "),a("h3",{attrs:{id:"克隆现有仓库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#克隆现有仓库"}},[s._v("#")]),s._v(" 克隆现有仓库")]),s._v(" "),a("p",[s._v("如果我们不是重新开发一整个项目，而是基于原有功能扩展新功能，那么我们只需要把之前的代码版本库复制到本地就行，这个过程称为克隆。")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[s._v("git clone "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("url"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("也可以克隆并自定义名字")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[s._v("git clone "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("url"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("name"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h2",{attrs:{id:"本地分支和远程分支"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#本地分支和远程分支"}},[s._v("#")]),s._v(" 本地分支和远程分支")]),s._v(" "),a("h3",{attrs:{id:"本地分支推送到远程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#本地分支推送到远程"}},[s._v("#")]),s._v(" 本地分支推送到远程")]),s._v(" "),a("p",[s._v("如果本地有某个分支，而远程没有，想要将这个分支推送到远程，可以使用下面命令：")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[s._v("git push\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("但是有的时候，直接使用上面命令会报错。")]),s._v(" "),a("div",{staticStyle:{"text-align":"center"}},[a("img",{staticStyle:{margin:"10px 0"},attrs:{src:t(445)}})]),s._v(" "),a("p",[s._v("如上图，本地有 dev 和 master 分支，而追踪分支只有 master 分支，即远程只有 master 分支，现要将本地的 dev 分支提交到远程的 dev 分支中，如果直接 push，将会出现下面的错误：")]),s._v(" "),a("div",{staticStyle:{"text-align":"center"}},[a("img",{staticStyle:{margin:"10px 0"},attrs:{src:t(446)}})]),s._v(" "),a("p",[s._v("这是由于 git 并不知道你要提交到远程仓库的那个分支，即未指定任何远程分支作为本地 dev 分支的追踪分支。所以，当本地新建的分支第一次提交时，需要指定提交到哪个分支。具体方法如下：")]),s._v(" "),a("p",[a("strong",[s._v("方法一：")])]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 将本地dev分支推送到远程origin仓库的dev分支")]),s._v("\ngit push "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("u origin dev\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 也可以推到不同名的分支下，例如将本地dev分支推送到远程的dev2分支中")]),s._v("\ngit push origin dev"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("dev2\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[a("strong",[s._v("方法二：")])]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 设置本地dev分支追踪分支为origin仓库的dev分支")]),s._v("\ngit push "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),s._v("set"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("upstream origin dev\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("值得注意的是，只需要第一次提交时指定追踪分支即可，后续的提交均会同步到该追踪分支中。")]),s._v(" "),a("h3",{attrs:{id:"远程分支拉取到本地"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#远程分支拉取到本地"}},[s._v("#")]),s._v(" 远程分支拉取到本地")]),s._v(" "),a("p",[s._v("当我们使用 clone 命令将代码克隆到本地时仓库时，在本地仓库中默认会自动新建一个 master 分支，但是由于 master 分支是一个稳定的分支，一般情况下只有经过测试验证功能稳定的代码才会合并到 master 分支中，因此开发过程中，我们通常是基于其他分支开发，即，将其他分支作为开发的追踪分支。")]),s._v(" "),a("p",[s._v("那么如果是想要把远程的某个分支拉取到本地，有以下三种方案：")]),s._v(" "),a("p",[a("strong",[s._v("方案一：")])]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[s._v("git pull\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("开发中不建议直接使用 pull 方法，因为此时拉取下来的代码并未指定追踪分支，如果后面要 push 的话，仍然需要指定追踪分支方能提交。")]),s._v(" "),a("p",[a("strong",[s._v("方案二：")])]),s._v(" "),a("p",[s._v("前面直接 pull 方法的痛点在于拉取远程分支时没有指定追踪分支，那么我们在拉取的时候就指定追踪分支不就可以完美的解决这个问题了吗。事实上，在 pull 的时候，可以直接给本地分支指定对应的远程分支作为其追踪分支的：")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 将远程分支拉取到本地分支，并自动关联")]),s._v("\ngit pull origin 本地分支 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" 远程分支\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 将远程分支拉取到本地当前分支")]),s._v("\ngit pull origin 远程分支\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[a("strong",[s._v("方案三：")])]),s._v(" "),a("p",[s._v("我们也可以通过 checkout 完成指定追踪分支、创建分支、切换分支一条龙服务。")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 创建并切换到dev_local分支，而且将dev_local分支和追踪分支origin/dev关联")]),s._v("\ngit checkout "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("b dev_local origin"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("dev\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("h2",{attrs:{id:"查看追踪分支"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查看追踪分支"}},[s._v("#")]),s._v(" 查看追踪分支")]),s._v(" "),a("p",[s._v("何为追踪分支？本地分支在远程的上流分支称为追踪分支。在工作区域中有两种方式可以查看对应的追踪分支")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 查看所有分支对应的追踪分支及其sha1值")]),s._v("\ngit branch "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("vv\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 查看当前分支的追踪分支")]),s._v("\ngit remote "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("v\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("h2",{attrs:{id:"查看日志"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查看日志"}},[s._v("#")]),s._v(" 查看日志")]),s._v(" "),a("p",[s._v("有三种方式帮助我们查看日志")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// 查看精简的版本日志，记录全部版本，可以帮助我们"后悔"')]),s._v("\ngit reflog\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 查看完整详细的版本日志")]),s._v("\ngit log\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 查看最新n条日志")]),s._v("\ngit log "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("h2",{attrs:{id:"查看未暂存和已暂存的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查看未暂存和已暂存的区别"}},[s._v("#")]),s._v(" 查看未暂存和已暂存的区别")]),s._v(" "),a("p",[s._v("最常用的查看状态的命令是：")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[s._v("git status\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("但是它只能查看文件目前处于哪个区域，而要查看文件在工作区和暂存区的具体内容差异可以使用"),a("code",[s._v("diff")]),s._v("命令，具体如下：")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 比较暂存区和工作区的差异，-代表暂存区；+代表工作区")]),s._v("\ngit diff\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("h2",{attrs:{id:"忽略文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#忽略文件"}},[s._v("#")]),s._v(" 忽略文件")]),s._v(" "),a("p",[s._v("一般情况下，我们在工程下的每一个文件都会被交由 git 管理，但这其实大可不必，很多文件我们也许并不需要 git 管理，比如"),a("code",[s._v("node_modules")]),s._v("。这个时候，我们可以在工程目录下新建一个"),a("code",[s._v(".gitignore")]),s._v("的文件，并列出需要 git 忽略的文件的匹配规则，那么 git 在提交的时候就会忽略"),a("code",[s._v(".gitignore")]),s._v("文件中所列出的文件了。")]),s._v(" "),a("p",[s._v("下面是"),a("code",[s._v(".gitignore")]),s._v("文件的几个简要规则：")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("任意字符\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("非\n目录名"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("忽略文件下的所有文件\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 忽略所有txt结尾的文件，除了a.txt文件")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("txt\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("txt\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("h2",{attrs:{id:"移除文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#移除文件"}},[s._v("#")]),s._v(" 移除文件")]),s._v(" "),a("p",[s._v("通过"),a("code",[s._v("git add")]),s._v("可以将文件从工作区加入到暂存区，如果需要把这个文件从暂存区移入到工作区，这个过程称为"),a("strong",[s._v("移除文件")]),s._v("。从 git 的暂存区移除文件有两种情况：\n1、从暂存区移除，同时删除工作区域内的文件，此时状态仍处于暂存区：")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[s._v("git rm "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("f "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("文件名"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("2、从暂存区删除，但保留工作区的源文件")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[s._v("git rm "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),s._v("cached "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("文件名"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("div",{staticStyle:{"text-align":"center"}},[a("img",{attrs:{src:t(447)}})]),s._v(" "),a("h2",{attrs:{id:"版本穿梭"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#版本穿梭"}},[s._v("#")]),s._v(" 版本穿梭")]),s._v(" "),a("p",[s._v("我们每提交一个版本就会生成一个 sha1 值，也称版本号。在开发过程中，有时我们可能需要在各个版本之间切换，比如我们可能需要切到某个版本上从而放弃该版本后面的开发，又或者我们只是想去查看某个版本具体的修改内容，总之，开发过程中，我们无法避免版本穿梭。")]),s._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",[s._v("git 的版本穿梭实质就是移动"),a("code",[s._v("HEAD指针")])])]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 回退到特定sha1值的版本，一般会结合reflog指令一起")]),s._v("\ngit reset "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),s._v("hard "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("sha1值"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 回退n步，有几个^,代表回退多少步")]),s._v("\ngit reset "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),s._v("hard "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HEAD")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),s._v("\ngit reset "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),s._v("hard "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HEAD")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("~")]),s._v("n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("div",{staticClass:"custom-block warning"},[a("p",[s._v("reset 的三个参数区别：")]),s._v(" "),a("p",[s._v("--soft：仅仅移动本地库 HEAD 指针，已经 add 的缓存以及工作区的所有东西都不变")]),s._v(" "),a("p",[s._v("--mixed：移动本地库 HEAD 指针，重置暂存区，已经 add 的缓存也会丢失，工作区的代码不会变动")]),s._v(" "),a("p",[s._v("--hard：移动本地库指针，重置暂存区，重置工作区")])]),s._v(" "),a("div",{staticStyle:{"text-align":"center"}},[a("img",{attrs:{src:t(448)}})]),s._v(" "),a("div",{staticStyle:{"text-align":"center",margin:"20px 0"}},[a("img",{attrs:{src:t(449)}})]),s._v(" "),a("div",{staticStyle:{"text-align":"center"}},[a("img",{attrs:{src:t(450)}})]),s._v(" "),a("p",[s._v("还有一种方法也可以实现版本穿梭：checkout")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[s._v("git checkout "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("sha1值"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("div",{staticClass:"custom-block tip"},[a("p",[s._v("checkout 版本穿梭处于一种游离状态：1、修改后必须提交；2、创建分支的好时机。")])]),s._v(" "),a("h2",{attrs:{id:"重写提交说明"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#重写提交说明"}},[s._v("#")]),s._v(" 重写提交说明")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 修改上次的提交说明")]),s._v("\ngit commit "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),s._v("amend "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("m "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"提交说明"')]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("h2",{attrs:{id:"创建分支"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建分支"}},[s._v("#")]),s._v(" 创建分支")]),s._v(" "),a("p",[s._v("创建分支可以同时并行开发多个功能，从而提高开发效率。另外，使用多个分支开发，即使某个分支开发失败也不会影响其他分支。")]),s._v(" "),a("p",[s._v("创建分支有两种方式：")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[s._v("git branch "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("分支名"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 创建并切换分支")]),s._v("\ngit checkout "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("b "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("分支名"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("h2",{attrs:{id:"查看分支"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查看分支"}},[s._v("#")]),s._v(" 查看分支")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 查看本地所有分支")]),s._v("\ngit branch\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 查看本地所有分支及各分支当前的sha1值")]),s._v("\ngit branch "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("v\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 查看本地分支和线上分支以及所有分支当前的sha1值")]),s._v("\ngit branch "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("av\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("h2",{attrs:{id:"切换分支"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#切换分支"}},[s._v("#")]),s._v(" 切换分支")]),s._v(" "),a("p",[s._v("git checkout <分支名>")]),s._v(" "),a("h2",{attrs:{id:"保存现场"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#保存现场"}},[s._v("#")]),s._v(" 保存现场")]),s._v(" "),a("p",[s._v("假如，你现在正在某个分支上开发，但是领导突然让你去切换到另一个分支上修复一个紧急的 bug，这个时候你该如何操作呢？")]),s._v(" "),a("p",[s._v("一种方式是先 commit 目前未完成功能的代码，然后再切换到目标分支上去修复缺陷。但是这种方式不是很好，因为一般而言，不建议在功能开发完毕前 commit 代码，这样到时候一个功能会出现许多次的 commit，维护起来不太方便。")]),s._v(" "),a("p",[s._v("一种比较优雅的方式就是使用保存现场：git stash。因此，如果功能未开发完毕就想切换分支，通常需要执行两步：保存现场、切换分支")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 在dev分支中保存现场")]),s._v("\ngit stash\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 切换到master分支")]),s._v("\ngit checkout master\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 做其他工作")]),s._v("\n……\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 切回dev分支")]),s._v("\ngit checkout dev\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 查看保存的现场")]),s._v("\ngit stash list\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 恢复现场(默认还原最后一次)")]),s._v("\ngit stash pop\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])]),a("p",[s._v("上面保存现场的操作并没有给现场命名，事实上，我们是自定义命名的：")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[s._v("git stash save "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"现场名字"')]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("div",{staticStyle:{"text-align":"center",margin:"10px 0"}},[a("img",{attrs:{src:t(451)}})]),s._v(" "),a("p",[a("strong",[s._v("恢复现场")])]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 恢复现场，并删除现场中所恢复的数据")]),s._v("\ngit stash pop\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 恢复现场，保留现场中的数据")]),s._v("\ngit stash apply\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("div",{staticStyle:{"text-align":"center"}},[a("img",{staticStyle:{margin:"10px 0"},attrs:{src:t(452)}}),s._v(" "),a("img",{attrs:{src:t(453)}})]),s._v(" "),a("p",[a("strong",[s._v("手动删除现场")]),s._v("\n当然除了使用 pop 删除现场，我们也可以手动删除现场")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[s._v("git stash drop stash@"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("div",{staticStyle:{"text-align":"center",margin:"10px 0"}},[a("img",{attrs:{src:t(454)}})]),s._v(" "),a("h2",{attrs:{id:"分支重命名"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分支重命名"}},[s._v("#")]),s._v(" 分支重命名")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[s._v("git branch "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("m 原名 新名\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h2",{attrs:{id:"删除分支"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#删除分支"}},[s._v("#")]),s._v(" 删除分支")]),s._v(" "),a("p",[s._v("由于分支分为本地分支和远程分支，并且两种分支的删除方式是不一样的。")]),s._v(" "),a("h3",{attrs:{id:"删除本地分支"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#删除本地分支"}},[s._v("#")]),s._v(" 删除本地分支")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[s._v("git branch "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("d "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("其他分支名"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("div",{staticClass:"custom-block tip"},[a("p",[s._v("上面的操作只能删除已合并内容的分支，而无法删除未合并内容的分支。")]),s._v(" "),a("p",[s._v("注：存在其他分支没有的内容的分支称为未合并内容的分支。")])]),s._v(" "),a("div",{staticStyle:{"text-align":"center"}},[a("img",{attrs:{src:t(455)}})]),s._v(" "),a("p",[s._v("当然，如果你想强硬点，不管三七二十一，就是要删掉某个分支，也是可以的：")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 强制删除，不合并也可以")]),s._v("\ngit branch "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("D")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("其他分支名"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("div",{staticClass:"custom-block tip"},[a("p",[s._v("如果在分支 A 中进行了新建和删除文件操作，且未 add 和 commit，此时 master 分支上是能够看到该操作的，并且在 master 分支上可以直接删除分支 A，无需合并。如果进行了 commit 操作，则 master 分支上就无法观察到此文件的变动了。")])]),s._v(" "),a("h3",{attrs:{id:"删除远程分支"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#删除远程分支"}},[s._v("#")]),s._v(" 删除远程分支")]),s._v(" "),a("p",[s._v("删除远程分支的方案是：通过将本地的空分支推送到远端的某个分支，从而达到删除远程分支。")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 删除远程的dev分支")]),s._v("\ngit push origin  "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("dev\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("div",{staticStyle:{"text-align":"center",margin:"10px 0"}},[a("img",{attrs:{src:t(456)}})]),s._v(" "),a("h2",{attrs:{id:"合并分支"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#合并分支"}},[s._v("#")]),s._v(" 合并分支")]),s._v(" "),a("p",[s._v("合并分支指的是将我们本地仓库的分支合并到远程仓库的某个分支，这样其他同事也可以通过远程仓库拉取你开发的内容，从而实现多人开发。")]),s._v(" "),a("p",[s._v("要将一个分支所做的更新合并至远程仓库，有两种方法：")]),s._v(" "),a("h3",{attrs:{id:"merge"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#merge"}},[s._v("#")]),s._v(" merge")]),s._v(" "),a("p",[s._v("如果将 B 分支合并到 A 分支，merge 需要在 A 分支中操作，具体需要进行如下两个操作：")]),s._v(" "),a("p",[s._v("1、切换到要合并的主分支上(A 分支)")]),s._v(" "),a("p",[s._v("2、执行命令：")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[s._v("git merge "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("待合并的分支名"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("div",{staticStyle:{"text-align":"center"}},[a("img",{staticStyle:{margin:"10px 0"},attrs:{src:t(457)}}),s._v(" "),a("img",{attrs:{src:t(458)}})]),s._v(" "),a("p",[s._v("为了方便理解，举个例子，如果此时你在 feature 分支上开发，与此同时，你的同时在 master 分支上提交了新的内容，此时的分支图如下图：")]),s._v(" "),a("div",{staticStyle:{"text-align":"center"}},[a("img",{staticStyle:{margin:"10px 0"},attrs:{src:t(459)}})]),s._v(" "),a("p",[s._v("为了将 master 分支上的内容合并到正在开发的 feature 分支上，可以在 feature 分支上执行下面的语句：")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[s._v("git merge master\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("此时，feature 分支上 git 会自动产生一个新的 commit(merge commit)")]),s._v(" "),a("div",{staticStyle:{"text-align":"center"}},[a("img",{staticStyle:{margin:"10px 0"},attrs:{src:t(460)}})]),s._v("\n如果合并期间产生了冲突，则修改后再重写提交。\n"),a("p",[s._v("我们可以看到，merge 时如果一个分支靠前，另一个分支落后，落后的分支可以通过 merge 直接追赶靠前的分支，这个过程称为 fast forward。")]),s._v(" "),a("p",[s._v("git 在 merge 时，默认使用的都是 fast forward。fast forward 后，两个分支会归于同一 commit。当然，我们也可以不使用 fast forward，即，禁止 fast forward。此时，fast forward 之后，两个分支不会归于同一 commit，主动合并的分支会前进一步。具体命令如下：")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[s._v("git merge "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),s._v("no"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("ff "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("分支名"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("div",{staticClass:"custom-block tip"},[a("p",[s._v("merge 的特点：")]),s._v(" "),a("p",[s._v("1、自动创建一个新的 commit，")]),s._v(" "),a("p",[s._v("2、如果出现冲突，只需要修改冲突部分，然后重新 commit 即可")]),s._v(" "),a("p",[s._v("优点：记录了真实的 commit 情况，包括每个分支的详情")]),s._v(" "),a("p",[s._v("缺点：每次 merge 都会新增一个 merge commit，所以使用 GUI tools 查看分支图时，非常的杂乱。")])]),s._v(" "),a("h3",{attrs:{id:"rebase"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rebase"}},[s._v("#")]),s._v(" rebase")]),s._v(" "),a("p",[s._v("合并分支的另一种方案就是 rebase，称为变基。")]),s._v(" "),a("p",[s._v("如果将 B 分支合并到 A 分支，rebase 需要在 B 分支中操作(注意和 merge 的区别)，具体需要进行如下两个操作：")]),s._v(" "),a("p",[s._v("1、切换到被合并的分支上(B 分支)")]),s._v(" "),a("p",[s._v("2、执行命令：")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[s._v("git rebase "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("主分支名"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("同样那个栗子，如果是 rebase 操作，最后的分支图是这样的：")]),s._v(" "),a("div",{staticStyle:{"text-align":"center"}},[a("img",{staticStyle:{margin:"10px 0"},attrs:{src:t(461)}})]),s._v(" "),a("p",[s._v("什么是变基，变基就是找公共祖先。事实上，rebase 就是先找到 master 和 feature 的公共祖先，然后把 master 上所有的 commit 都移动到 feature 的顶端。")]),s._v(" "),a("p",[s._v("如何在 rebase 期间出现了冲突，可按以下步骤解决：")]),s._v(" "),a("ul",[a("li",[s._v("修改冲突")]),s._v(" "),a("li",[s._v("git add .")]),s._v(" "),a("li",[s._v("git rebase --continue")])]),s._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",[s._v("rebase 特点：将之前的 commit 合并")]),s._v(" "),a("p",[s._v("优点： 更加简洁的 commit 图")]),s._v(" "),a("p",[s._v("缺点：由于 re-write 了分支 history，丢失了部分 commit，得到的不是真实的 commit。")])]),s._v(" "),a("div",{staticClass:"custom-block danger"},[a("p",[s._v("merge 和 rebase 的区别：")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("merge 合并会新增一个 merge commit，然后将两个分支的历史联系起来，这是一种非破坏性的操作，对现有分支不会造成任何更改，但是会导致历史记录比较杂乱。")])]),s._v(" "),a("li",[a("p",[s._v("rebase 会将整个分支移动到另一个分支上，使得历史记录更加清晰，但是会破坏 commit 的历史。")])])]),s._v(" "),a("p",[s._v("因此，开发期间更加推荐 rebase，但是 rebase 由于会改变分支 commit，如果你在公共分支(如 master)上使用了 rebase，它会移动 master，git 会认为主分支的历史与其他人的有分歧，从而产生冲突。"),a("strong",[s._v("所以永远只在你自己开发的分支上使用 rebase。")])])]),s._v(" "),a("h2",{attrs:{id:"标签"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#标签"}},[s._v("#")]),s._v(" 标签")]),s._v(" "),a("p",[s._v("git 可以给仓库中的某一个提交打上标签，以示重要，通常会使用这个功能来标记发布节点(V1.0、V2.0 等)。标签使用于整个项目，和具体的分支没关系。也就是说：在一个分支中打标签，删除标签，其他分支也是可以看见的。")]),s._v(" "),a("h3",{attrs:{id:"查看标签"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查看标签"}},[s._v("#")]),s._v(" 查看标签")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 查看标签列表")]),s._v("\ngit tag\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 查看某个标签详细信息")]),s._v("\ngit tag show 标签名\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("h3",{attrs:{id:"打标签"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#打标签"}},[s._v("#")]),s._v(" 打标签")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 打上v1.0标签")]),s._v("\ngit tag v1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("h3",{attrs:{id:"推送标签到远程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#推送标签到远程"}},[s._v("#")]),s._v(" 推送标签到远程")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 将v1.0推送到远程")]),s._v("\ngit push origin v1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 将本机所有的标签推送到远程")]),s._v("\ngit push origin "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),s._v("tags\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("h3",{attrs:{id:"删除标签"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#删除标签"}},[s._v("#")]),s._v(" 删除标签")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 删除本地标签")]),s._v("\ngit tag "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("d v1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 删除远程标签")]),s._v("\ngit push origin   "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" v1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])])])}),[],!1,null,null,null);a.default=r.exports}}]);